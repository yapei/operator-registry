apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "sonarsource.parflesh.github.io/v1alpha1",
          "kind": "SonarQube",
          "metadata": {
            "name": "example-sonarqube"
          },
          "spec": {}
        },
        {
          "apiVersion": "sonarsource.parflesh.github.io/v1alpha1",
          "kind": "SonarQubeServer",
          "metadata": {
            "name": "example-sonarqubeserver"
          },
          "spec": {}
        }
      ]
    capabilities: Basic Install
  name: sonarqube-operator.v0.0.6
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: SonarQube is the Schema for the sonarqubes API
      displayName: SonarQube Cluster
      kind: SonarQube
      name: sonarqubes.sonarsource.parflesh.github.io
      resources:
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: SonarQube
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: community, developer, or enterprise (default is community)
        displayName: Edition
        path: edition
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Node Affinity
        displayName: Node Affinity
        path: nodeConfigAdvanced[0].nodeAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:nodeAffinity
      - description: Node selector
        displayName: Node Selector
        path: nodeConfigAdvanced[0].nodeSelector
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:selector:Node
      - description: Pod Affinity
        displayName: Pod Affinity
        path: nodeConfigAdvanced[0].podAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:podAffinity
      - description: Pod AntiAffinity
        displayName: Pod AntiAffinity
        path: nodeConfigAdvanced[0].podAntiAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:podAntiAffinity
      - description: Priority Class Name
        displayName: Priority Class
        path: nodeConfigAdvanced[0].priorityClass
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Resource requirements
        displayName: Resources
        path: nodeConfigAdvanced[0].resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      - description: Node type (all, application, or search)
        displayName: Type
        path: nodeConfigAdvanced[0].type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfigAdvanced
        - urn:alm:descriptor:com.tectonic.ui:select:all
        - urn:alm:descriptor:com.tectonic.ui:select:application
        - urn:alm:descriptor:com.tectonic.ui:select:search
      - description: Storage class
        displayName: Storage Class
        path: nodeConfig[0].storageClass
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfig
        - urn:alm:descriptor:io.kubernetes:StorageClass
      - description: Size of Storage (ex 1Gi)
        displayName: Storage Size
        path: nodeConfig[0].storageSize
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfig
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Node type (all, application, or search)
        displayName: Type
        path: nodeConfig[0].type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:NodeConfig
        - urn:alm:descriptor:com.tectonic.ui:select:all
        - urn:alm:descriptor:com.tectonic.ui:select:application
        - urn:alm:descriptor:com.tectonic.ui:select:search
      - description: Secret with sonar configuration files (sonar.properties, wrapper.properties).
          Don't add cluster properties to configuration files as this could cause
          unexpected results
        displayName: Secret
        path: secret
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Secret
      - description: Service Account
        displayName: Service Account
        path: serviceAccount
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Shutdown SonarQube cluster
        displayName: Shutdown
        path: shutdown
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Number of SonarQube application nodes
        displayName: Size
        path: size
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: Automatically apply major version updates
        displayName: Major
        path: updatesMajor
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:checkbox
        - urn:alm:descriptor:com.tectonic.ui:fieldGroup:updates
      - description: Automatically apply minor version updates
        displayName: Minor
        path: updatesMinor
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:checkbox
        - urn:alm:descriptor:com.tectonic.ui:fieldGroup:updates
      - description: if empty operator will start latest version of selected edition
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      statusDescriptors:
      - description: Status of pods
        displayName: Pod Statuses
        path: deployments
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podStatuses
      - description: Status of search pods
        displayName: Search Pod Statuses
        path: searchDeployments
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podStatuses
      - description: Kubernetes service that can be used to expose SonarQube
        displayName: Service
        path: service
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Service
      version: v1alpha1
    - description: SonarQubeServer is the Schema for the sonarqubeservers API
      displayName: SonarQube Server
      kind: SonarQubeServer
      name: sonarqubeservers.sonarsource.parflesh.github.io
      resources:
      - kind: Deployment
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      specDescriptors:
      - description: community, developer, or enterprise (default is community)
        displayName: Edition
        path: edition
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: External base URL
        displayName: External URL
        path: externalURL
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: SonarQube application hosts list
        displayName: Hosts
        path: hosts
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:hosts
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Node Affinity
        displayName: Node Affinity
        path: nodeConfig.nodeAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:nodeAffinity
      - description: Node selector
        displayName: Node Selector
        path: nodeConfig.nodeSelector
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:selector:Node
      - description: Pod Affinity
        displayName: Pod Affinity
        path: nodeConfig.podAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:podAffinity
      - description: Pod AntiAffinity
        displayName: Pod AntiAffinity
        path: nodeConfig.podAntiAffinity
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:podAntiAffinity
      - description: Priority Class Name
        displayName: Priority Class
        path: nodeConfig.priorityClass
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Resource requirements
        displayName: Resources
        path: nodeConfig.resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      - description: Storage class
        displayName: Storage Class
        path: nodeConfig.storageClass
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:StorageClass
      - description: Size of Storage (ex 1Gi)
        displayName: Storage Size
        path: nodeConfig.storageSize
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: SonarQube search hosts list
        displayName: Search Hosts
        path: searchHosts
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:arrayFieldGroup:searchHosts
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Secret with sonar configuration files (sonar.properties, wrapper.properties).
          Don't add cluster properties to configuration files as this could cause
          unexpected results
        displayName: Secret
        path: secret
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Secret
      - description: Service Account
        displayName: Service Account
        path: serviceAccount
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Shutdown SonarQube server
        displayName: Shutdown
        path: shutdown
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
      - description: Sonar Node Type application or search when clustering is enabled
          otherwise aio (all-in-one)
        displayName: Server Type
        path: type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:aio
        - urn:alm:descriptor:com.tectonic.ui:select:application
        - urn:alm:descriptor:com.tectonic.ui:select:search
      - description: Automatically apply major version updates
        displayName: Major
        path: updatesMajor
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:checkbox
        - urn:alm:descriptor:com.tectonic.ui:fieldGroup:updates
      - description: Automatically apply minor version updates
        displayName: Minor
        path: updatesMinor
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:checkbox
        - urn:alm:descriptor:com.tectonic.ui:fieldGroup:updates
      - description: if empty operator will start latest version of selected edition
          then lock the version
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:advanced
        - urn:alm:descriptor:com.tectonic.ui:text
      statusDescriptors:
      - description: Status of pods
        displayName: Pod Statuses
        path: deployment
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podStatuses
      - description: Kubernetes service that can be used to expose SonarQubeServer
        displayName: Service
        path: service
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes:Service
      version: v1alpha1
  description: |-
    WIP
    Creates SonarQube servers and clusters
  displayName: Sonarqube Operator
  icon:
  - base64data: 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
    mediatype: image/png
  install:
    spec:
      deployments:
      - name: sonarqube-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: sonarqube-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: sonarqube-operator
            spec:
              containers:
              - command:
                - sonarqube-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: sonarqube-operator
                image: quay.io/parflesh/sonarqube-operator:0.0.6
                imagePullPolicy: Always
                name: sonarqube-operator
                resources: {}
              serviceAccountName: sonarqube-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          - serviceaccounts
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - sonarqube-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          - deployments
          verbs:
          - get
        - apiGroups:
          - sonarsource.parflesh.github.io
          resources:
          - '*'
          - sonarqubeservers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        serviceAccountName: sonarqube-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - SonarQube
  maintainers:
  - {}
  maturity: alpha
  provider:
    name: ParFlesh
  replaces: sonarqube-operator.v0.0.5
  version: 0.0.6
